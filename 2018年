#include	"config.h"
#include	"GPIO.h"

#define uchar unsigned char
typedef uchar bool;


//模式0、模式1内部切换标志
uchar  mode0_next;
uchar  mode1_next;
unsigned char i ;

//模式时间和种类
#define MODE0_TIME    10000
#define MODE1_TIME    10000
#define MODE_0 0
#define MODE_1 1
#define MODE_2 2
#define MODE_3 3

//LED控制
#define ture 1
#define false 0
#define ON     1
#define OFF    0
#define LED_PORT  P0
#define LED0_Pin GPIO_Pin_0
#define LED1_Pin GPIO_Pin_1
#define LED2_Pin GPIO_Pin_2
#define LED3_Pin GPIO_Pin_3
#define LED4_Pin GPIO_Pin_4
#define LED5_Pin GPIO_Pin_5
#define LED6_Pin GPIO_Pin_6
#define LED7_Pin GPIO_Pin_7
#define BEEP_Pin GPIO_Pin_5
#define LEDs_NUM               sizeof (LED)/ sizeof(u8)

u8 LED[] = {LED0_Pin,LED1_Pin,LED2_Pin,LED3_Pin,LED4_Pin,LED5_Pin,LED6_Pin,LED7_Pin};
u16 cnt = 0;
int count0=0,count1=0;
void	GPIO_config(void)
{
	GPIO_InitTypeDef	GPIO_InitStructure;				//结构定义
	GPIO_InitStructure.Pin  = GPIO_Pin_All;	      // 指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
	GPIO_InitStructure.Mode = GPIO_OUT_PP;				//指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_OUT_PP
	GPIO_Inilize(GPIO_P0,&GPIO_InitStructure);	
	GPIO_Inilize(GPIO_P2,&GPIO_InitStructure);		//初始化
}



 //LED_On(LED_PORT , LED0_Pin , ON);
//LED_On(LED_PORT , LED1_Pin , ON);
//上述两条语句执行完，LED0亮。
void LED_On(u8 led_port,u8 led_pin )
{
  GPIO_WritePin(led_port ,led_pin , ON);
}

void LED_Off(u8 led_port,u8 led_pin)
{
  GPIO_WritePin(led_port ,led_pin , OFF);
}

void LED_Toggle(u8 led_port,u8 led_pin)
{
  GPIO_TogglePin(led_port , led_pin );
}

void LED_LeftToRight(u8 Pinx)
{
  
  if (Pinx == 0) //仅点亮Left的LED
  {
    LED_On(GPIO_P0, LED[0]); 
	LED_Off(GPIO_P0, LED[7]); 
  }
 /* else if (Pinx >= 8) //仅熄灭Right的LED
  {

	LED_Off(GPIO_P0, LED[Pinx]);
  }	  	*/
  else //先点亮右边的LED，再熄灭左边的
  {   
    LED_On(GPIO_P0, LED[Pinx]);
    Pinx--;
    LED_Off(GPIO_P0, LED[Pinx]);    
  }
}
void LED_RightToLeft(u8 Pinx)
{
  
  if (Pinx == 7) //仅点亮Left的LED
  {
    LED_On(GPIO_P0, LED[7]);  
  }

  else //先点亮右边的LED，再熄灭左边的
  {   
    LED_On(GPIO_P0, LED[Pinx]);
    Pinx++;
    LED_Off(GPIO_P0, LED[Pinx]);    
  }
}
void BEEP_Tweet()     //翻转蜂鸣器引脚
{
   GPIO_TogglePin(GPIO_P2,BEEP_Pin);

}

void LED_SidesToMiddle(u8 Pinx)	 //两边向中间
{
  
  if (Pinx <= 3) //循环点亮
  {
    LED_On(GPIO_P0, LED[Pinx]); 
	LED_On(GPIO_P0, LED[7-Pinx]); 
	Pinx--;
	LED_Off(GPIO_P0, LED[Pinx]); 
	LED_Off(GPIO_P0, LED[7-Pinx]); 
  }
}

void LED_MiddleToSides(u8 Pinx)	 //中间向两边
{
  
  if (Pinx >= 0) //循环点亮
  {
    LED_On(GPIO_P0, LED[Pinx]); 
	LED_On(GPIO_P0, LED[7-Pinx]);
    Pinx++;
	LED_Off(GPIO_P0, LED[Pinx]); 
	LED_Off(GPIO_P0, LED[7-Pinx]); 
  }
}

void Timer0() interrupt 1  //中断服务函数
{
    TL0 = (256-100);  //定时100us
    count0++;
	if (count0 >= 5000)    //计时0.5s
	 {
	  mode0_next = ture;
	  count0=0;
	 }
}
void Timer1() interrupt 3  //中断服务函数
{
    TH0 = (256-50);  //定时50us
    count1 ++;
	if (count1 >= 20000)   //计时1s
    {
	  mode1_next = ture;
	  count1=0;
    }
}

void main()
{

  uchar mode;
  GPIO_config();
  TMOD |= 0x03; //T1设置不变，T0设置为方式3
  TH0 = (256-100);  //定时100us
  TL0 = (256-50);      //定时50u
  ET0 = 1;  //允许定时器/计数器T0溢出中断（IE）
  ET1 = 1;  //允许定时器/计数器T1溢出中断（IE）
  EA = 1;  //IE，开启总开关
  TR0=1;   //开启定时器/计数器T0计数（TCON）
  TR1=1;   //开启定时器/计数器T1计数（TCON）
   
  while(1)
  {
      if(mode==MODE_0)
      {
        //做模式0要做的事  
         if ((mode0_next) == ture)  //模式0的速度
         {
            mode0_next = false;
            LED_LeftToRight(i);
            if( i == 7) 
            {
              mode = MODE_1;
              continue ;
            } 
            i++;
          }
       }
 
       else if(mode==MODE_1)
       {
		 
		 if ((mode0_next) == ture)  //模式0的速度
         {
            mode0_next = false;
            LED_RightToLeft(i);
            if( i == 0) 
            {
              mode = MODE_2;
              continue ;
            } 
            i--;
         }
        }
	  	else if(mode==MODE_2)
       {
		 
		 if ((mode0_next) == ture)  //模式0的速度
         {
            mode0_next = false;
            LED_SidesToMiddle(i);
            if( i == 3) 
            {
              mode = MODE_3;
              continue ;
            } 
            i++;
         }
        }
		else if(mode==MODE_3)
       {
		 
		 if ((mode0_next) == ture)  //模式0的速度
         {
            mode0_next = false;
            LED_MiddleToSides(i);
            if( i == 0) 
            {
              mode = MODE_0;
              continue ;
            } 
            i--;
         }
        }
	   if ((mode1_next) == ture)
	   {
	   	  mode1_next = false;
		  BEEP_Tweet();
	   
	   }
  }
}

  


